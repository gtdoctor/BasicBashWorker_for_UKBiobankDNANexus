#!/usr/bin/env python3
# cloud_workstation 2.0.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://documentation.dnanexus.com/developer for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import datetime
import sys
import subprocess
import os
import dxpy

# in case PYTHONPATH is not set correctly
sys.path.append("/usr/lib/python3/")

import asset_builder_tools
import dx_utils

TIMEOUT_FILE = '/home/dnanexus/.dx.timeout'
TIME_FORMAT = '%Y %m %d %H %M %S'

SERVER_READY_TAG = 'server_running'


def _get_timeout():
    with open(TIMEOUT_FILE, 'r') as fh:
        timeout = fh.read().strip()
    return datetime.datetime.strptime(timeout, TIME_FORMAT)


@dxpy.entry_point('main')
def main(**job_inputs):
    asset_builder_tools.create_before_file_list()

    if 'snapshot' in job_inputs:
#       cmd = 'dx cat {0} | sudo tar -C / -zxvf - '.format(job_inputs['snapshot']['$dnanexus_link'])
#       dx_utils.run_cmd(cmd)
        snapshot_cmd = 'dx cat {0} | sudo tar -C / -zxvf - '.format(job_inputs['snapshot']['$dnanexus_link'])
    
        # Run the command in a subprocess and wait for it to finish
        process = subprocess.Popen(snapshot_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Print output to monitor progress
        for line in process.stdout:
            print(line, end="")
        for line in process.stderr:
            print(line, end="")

        process.wait()  # Ensures that the extraction is fully completed before proceeding

    if 'fids' in job_inputs:
        for fid in job_inputs['fids']:
            cmd = 'dx download {0}'.format(fid['$dnanexus_link'])
            dx_utils.run_cmd(cmd)

    # Loop until it's time to quit
    dx_utils.run_cmd('dx-set-timeout {0} '.format(job_inputs['max_session_length']))
    dx_utils.run_cmd('sudo chmod 666 {0} '.format(TIMEOUT_FILE))

    cmd = ['dx', 'tag', dxpy.JOB_ID, SERVER_READY_TAG]
    dx_utils.run_cmd(cmd)

    # interactive apps should run sub-jobs detached automatically.
    with open("/home/dnanexus/.bashrc", "a") as bashrc:
        bashrc.write("\nexport DX_RUN_DETACH=1\n")

## UPDATE TO READ bash
    # Ensure `code.sh` is executable
    os.chmod("/home/dnanexus/bash_update.sh", 0o755)

# Pass job inputs as environment variables
    env_vars = os.environ.copy()  # Copy current environment

    for key, value in job_inputs.items():
        if isinstance(value, dict) and "$dnanexus_link" in value:
            env_vars[key] = value["$dnanexus_link"]  # Extract DNAnexus link
        else:
            env_vars[key] = str(value)  # Convert everything to string for safety


    # Run `code.sh` and stream output
    process = subprocess.Popen(["bash", "/home/dnanexus/bash_update.sh"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env_vars, text=True)

    for line in process.stdout:
        print(line, end="")

    for line in process.stderr:
        print(line, end="")

    process.wait()  # Wait for `code.sh` to complete


# Loop until it's time to quit - commented out becuse it's in the shell script

    # while True:
    #     dx_utils.run_cmd(["sleep", "10"])
    #     timeout = _get_timeout()
    #     if datetime.datetime.now() > timeout:
    #         break

    output = {}

    return output


dxpy.run()

